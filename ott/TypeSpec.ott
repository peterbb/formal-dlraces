embed
{{coq
Require Export ZArith.

Require Export Syntax.
Require Export TypeSyntax.
Require Import Substitution.
Require Import FreeVar.
Require Import Constraint.

}}

defns
AbstrSateOrder :: '' ::=
    defn 
    C |- D <= D' :: ::abstrstate_order::''
        {{tex [[C]] \vdash [[D]] \leq [[D']] }} by

    --------------------------------------------- :: SO_Refl
    C |- D <= D

    C |- D_1 <= D_2
    C |- D_2 <= D_3
    --------------------------------------------- :: SO_Trans
    C |- D_1 <= D_3

    --------------------------------------------- :: SO_Ax
    D <= D' |- D <= D'

    D_1 <= D_2
    --------------------------------------------- :: SO_Base
    C |- D_1 <= D_2

    C |- Empty <= D_1
    --------------------------------------------- :: SO_Plus1
    C |- D_2 <= D_2 + D_1

    C |- D_1 <= Empty
    --------------------------------------------- :: SO_Plus2
    C |- D_2 + D_1 <= D_2

    C |- Empty <= D_1
    --------------------------------------------- :: SO_Minus1
    C |- D_2 - D_1 <= D_2

    C |- D_1 <= Empty
    --------------------------------------------- :: SO_Minus2
    C |- D_2 <= D_2 - D_1

defns
SubType :: '' ::=
    defn
    C |- AT <= AT' :: ::subtype:: ''
        {{tex [[C]] \vdash [[AT]] \leq [[AT']] }} by
    
    ---------------------------------------- :: S_Refl
    C |- AT <= AT

    C |- AT_1 <= AT_2
    C |- AT_2 <= AT_3
    ---------------------------------------- :: S_Trans
    C |- AT_1 <= AT_3

    C |= r_1 <= r_2
    ---------------------------------------- :: S_Lock
    C |- L r_1 <= L r_2

    C |- AT_1' <= AT_1
    C |- AT_2 <= AT_2'
    C |- D_1' <= D_1
    C |- D_2 <= D_2'
    ---------------------------------------- :: S_Arrow
    C |- AT_1 - D_1 -> D_2 -> AT_2 <= AT_1' - D_1' -> D_2' -> AT_2'


defns
TypeAndEffect :: '' ::=
    defn
    C ; G |- e : SC '::' phi :: ::welltyped_spec::''
        {{tex [[C]] ; [[G]] \vdash [[e]] : [[SC]] :: [[phi]] }} by


    G(x) = SC
    ------------------------------- :: T_Var
    C; G |- x : SC :: D -> D


    C |- { pi } [= rho
    --------------------------------------- :: T_NewL
    C; G |- newL pi : <L rho> :: D -> D

    C |- rho [= rho'
    --------------------------------------- :: T_LRef
    C; G |- l rho : <L rho'> :: D -> D

    downAT AT_1 = ST_1
    C; G , x : <AT_1> |- t : <AT_2> :: phi 
    ---------------------------------------- :: T_Abs1
    C; G |- fn x : ST_1 . t : <AT_1 - phi -> AT_2> :: D -> D

    downAT AT_1 = ST_1 
    downAT AT_2 = ST_2
    C; G , f : <AT_1 - phi -> AT_2 >, x : <AT_1> |- t : <AT_2> :: D_1 -> D_2
    --------------------------------------------- :: T_Abs2
    C; G |- fun f : ST_1 -> ST_2 . x : ST_1 . t : <AT_1 - D_1 -> D_2 -> AT_2> :: D_1 -> D_1

    C; G |- v_1 : <AT_2 - D_1 -> D_2 -> AT_1> :: D_1 -> D_1
    C; G |- v_2 : <AT_2> :: D_1 -> D_1
    -------------------------------------------- :: T_App
    C; G |- v_1 v_2 : <AT_1> :: D_1 -> D_2

    C; G |- v : <Bool> :: D_1 -> D_1
    C; G |- e_1 : <AT> :: D_1 -> D_2
    C; G |- e_2 : <AT> :: D_1 -> D_2
    ------------------------------------------------------- :: T_Cond
    C; G |- if v then e_1 else e_2 : <AT> :: D_1 -> D_2

    C; G |- e_1 : SC_1 :: D_1 -> D_2
    downSC SC_1 = ST_1
    C; G, x : SC_1 |- t_2 : <AT_2> :: D_2 -> D_3
    ------------------------------------------------------- :: T_Let
    C; G |- let x : ST_1 = e_1 in t_2 : <AT_2> :: D_1 -> D_3

    C; G |- t : <AT> :: Empty -> D_2
    ------------------------------------------------------ :: T_Spawn
    C; G |- spawn t : <Thread> :: D_1 -> D_1


    C; G |- v : <L rho> :: D_1 -> D_1
    C |- D_1 + (rho:1) <= D_2 
    ------------------------------------------------------- :: T_Lock
    C; G |- v.lock : <L rho> :: D_1 -> D_2
    
    C; G |- v : <L rho> :: D_1 -> D_1
    C |- D_1 - (rho:1) <= D_2
    ------------------------------------------------------- :: T_Unlock
    C; G |- v.unlock : <L rho> :: D_1 -> D_2

    C_1 , C_2 ; G |- e : < AT > :: D_1 -> D_2
    rho1 .. rhoj notIn FV(G)
    X1 .. Xk notIn FV(G)
    rho1 .. rhoj notIn FV(C_1)
    X1 .. Xk notIn FV(C_1)
    ------------------------------------------------------- :: T_Gen
    C_1 ; G |- e : All rho1 .. rhoj X1 .. Xk : C_2 . AT :: D_1 -> D_2

    C_1; G |- e : All rho1 .. rhoj X1 .. Xk : C_2 . AT :: D_1 -> D_2
    th = [ D1 .. Dm / X1 .. Xk ][ r1 .. rz / rho1 .. rhoj ]
    C_1 |= th C_2
    ------------------------------------------------------- :: T_Inst
    C_1; G |- e : < th AT > :: D_1 -> D_2

    C; G |- e : <AT_2> :: D_1 -> D_2
    C |- AT_2 <= AT_1
    C |- D_1' <= D_1
    C |- D_2 <= D_2'
    ------------------------------------------------------- :: T_Sub
    C; G |- e : <AT_1> :: D_1' -> D_2'

    defn 
    |- P '::' Phi :: ::welltyped_prog_spec::''
       {{tex \vdash [[P]] :: [[Phi]] }} by

    C ; empty |- t : <AT> :: phi 
    ----------------------------- :: T_Thread
    |- p < t > :: p < phi ; C >

    |- P_1 :: Phi_1
    |- P_2 :: Phi_2
    -------------------------------- :: T_Par
    |- P_1 || P_2 :: Phi_1 || Phi_2
    

