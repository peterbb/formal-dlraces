embed 
{{coq
Require Import PArith.
}}

metavar processid, p ::= 
    {{coq nat}} {{ coq-equality }} {{com Process id}}

metavar variable, x, f ::= 
    {{coq nat}} {{ coq-equality }} {{com Variable for value}}

metavar programpoint, pi {{tex \pi}} ::= 
    {{coq positive}} {{ coq-equality }} {{com Program point}}

metavar lockref, l ::= 
    {{coq positive}} {{ coq-equality }} {{com Lock reference}}

grammar
syntax_formula :: syntax_formula_ ::=
    | rho = rho'                     :: M:: RhoEq {{coq ([[rho]] = [[rho']])}}
    | rho <> rho'                    :: M:: RhoNotEq {{coq ([[rho]] <> [[rho']])}}
    | rho < rho'                     :: M:: RhoLt {{coq ([[rho]] < [[rho']])}}
    | x <> x'                        :: M:: VarEq {{coq ([[x]] <> [[x']])}}
    | p <> p'                        :: M:: ProcIdEq {{coq ([[p]] <> [[p']])}}


program, P :: P_ ::= {{com Program}}
    | Empty                         ::  :: Empty {{com Empty Program}}
                                           {{tex \emptyset }}
    | p < t >                       ::  :: Single {{com Single Program}}
                                           {{tex [[p]] \langle [[t]] \rangle }}
    | P_1 || P_2                    ::  :: Parallel {{com Parallel Composition}}

thread, t :: t_ ::= {{com Thread}}
    | v                             ::  :: Value {{com Value}}
    | let x : ST = e in t           ::  :: Let (+ bind x in t +) {{com Let}}
    | t [ v / x ]                   :: M:: Subst 
                                           {{icho (value_subst_thread [[v]] [[x]] [[t]])}} 
                                            {{com Substitute [[v]] for [[x]] in [[t]] }}
    | ( t )                         :: S:: Paren {{icho ( [[t]] ) }}

expr, e :: e_ ::= {{com Expression}}
    | t                             ::  :: Thread {{com Thread}}
    | v_1 v_2                       ::  :: App  {{com Application}}
    | if v then e_1 else e_2        ::  :: Cond {{com Conditional}}
    | spawn t                       ::  :: Spawn {{com Spawn a thread}}
    | newL pi                       ::  :: NewL {{com Create a new lock}}
                                            {{tex \textbf{newL}_{[[pi]]} }}
    | v . lock                      ::  :: AcqLock {{com Aqcuire lock}}
    | v . unlock                    ::  :: RelLock {{com Release lock}}
    | < e >                         :: S:: Paren {{icho [[e]] }}
                                            {{tex ([[e]]) }}
value, v :: v_ ::= {{com Value}}
    | x                             ::  :: VarRef {{com Variable reference}}
    | l r                           ::  :: LockRef {{tex [[l]]^{ [[r]] } }}
                                            {{com Lock reference }}
    | true                          ::  :: True {{com Truth value}}
    | false                         ::  :: False {{com Truth value}}
    | fn x : ST . t                 ::  :: Fun (+ bind x in t +) 
                                           {{com Function abstraction}}
    | fun f : ST_1 . x : ST_2 . t   ::  :: RecFun 
                                            (+ bind f in t +)
                                            (+ bind x in t +) 
                                            {{com Recursive function abstraction}}
    | p                             ::  :: ProcessId {{com Proccess id}}
    | ( v )                         :: S:: Paren {{icho ( [[v]] ) }}

lockset, r :: ls_ ::= {{com Lock set expression}}
    | rho                           ::  :: Var {{com Variable}}
    | { pi }                        ::  :: Single {{com Singleton}}
    | r u r'                        ::  :: Union {{com Union}}
                                           {{tex [[r]] \cup [[r']] }}
    | ( r )                         :: M:: Paren {{icho [[r]] }}


ls_var, max_rho {{tex \rho_{max} }}, rho {{tex \rho}} :: '' ::= {{coq positive}}
    | rho + 1                       :: M:: Inc {{coq (Pos.succ [[rho]]) }}
    | max( rho1 .. rhok )           :: M:: Max {{coq (fold_left Pos.max [[rho1 .. rhok]] 1%positive)}}
    | min( rho1 .. rhok )           :: M:: Min {{coq (fold_left Pos.min [[rho1 .. rhok]] 1%positive)}}
    | ( rho )                       :: S:: Paren {{icho [[rho]] }}



grammar
simpletype, ST {{tex T}} :: st_ ::= {{com Simple Type}}
    | Bool                          ::  :: Bool {{com Boolean}}
    | Thread                        ::  :: Thread {{com Thread}}
    | L                             ::  :: Lock {{com Lock}}
    | ST_1 -> ST_2                  ::  :: Arrow {{com Function}}
                                          {{tex [[ST_1]] \rightarrow [[ST_2]] }}
    | ( ST )                        :: S:: Paren {{icho [[ST]] }}

substitutions
    single value variable :: value_subst

embed
{{coq
Fixpoint dom_P (P : program) : list processid :=
    match P with
    | P_Empty => nil
    | P_Single p _ => p :: nil
    | P_Parallel P1 P2 => app (dom_P P1) (dom_P P2)
    end.
}}


embed
{{coq
Definition eq_ls_var := Pos.eq_dec.
}}

