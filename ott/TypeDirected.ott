embed
{{coq
Require Import Syntax.
Require Import TypeSyntax.
Require Import TypeSpec.
Require Import Substitution.
Require Import FreeVar.
Require Import Constraint.
}}

defns
SyntaxDirected :: '' ::=
    defn
    C ; G |- e : AT '::' phi :: ::syntaxdirected:: ''
        {{tex [[C]] ; [[G]] \vdash [[e]] : [[AT]] :: [[phi]] }} by

    G(x) = All rho1 .. rhok X1 .. Xj : C' . AT
    th = [ D1 .. Dm / X1 .. Xj ] [ r1 .. rz / rho1 .. rhok ]
    C |= th C'
    -------------------------------------- :: TD_Var
    C; G |- x : th AT :: D -> D

    C |- { pi } [= rho
    ------------------------------------- :: TD_NewL
    C; G |- newL pi : L rho :: D -> D

    C |- rho [= rho'
    ------------------------------------- :: TD_LRef
    C; G |- l rho : L rho' :: D -> D

    downAT AT1 = ST1
    C ; G , x : < AT1 > |- t : AT2 :: phi 
    ------------------------------------ :: TD_Abs1
    C; G |- fn x : ST . t : AT1 - phi -> AT2 :: D -> D

    downAT AT1 = ST1
    downAT AT2 = ST2
    C; G, f : <AT1 - phi -> AT2> , x : <AT2> |- t : AT2 :: phi
    phi = D1 -> D2
    ------------------------------------ :: TD_Abs2
    C; G |- fun f : ST1 -> ST2 . x : ST1 . t : AT1 - phi -> AT2 :: D1 -> D1

    C; G |- v1 : AT2 - D1 -> D2 -> AT2 :: D -> D
    C; G |- v2 : AT2 :: D -> D
    ------------------------------------ :: TD_App
    C ; G |- v1 v2 : AT1 :: D -> D'

    C |- AT1 <= AT
    C |- AT2 <= AT
    C |- D1 <= D'
    C |- D2 <= D'
    C; G |- v : Bool :: D -> D 
    C; G |- e1 : AT1 :: D -> D1
    C; G |- e2 : AT2 :: D -> D2
    --------------------------------------- :: TD_Cond
    C ; G |- if v then e1 else e2 : AT :: D -> D'

    C1, C2 ; G |- e : AT1 :: D1 -> D2
    rho1 .. rhoj notIn FV(G)
    rho1 .. rhoj notIn FV(C)
    X1 .. Xk notIn FV(G)
    X1 .. Xk notIn FV(C)
    C2; G, x : All rho1 .. rhoj X1 .. Xk : C1 . AT1 |- e2 : AT2 :: D2 -> D3
    -------------------------------------- :: TD_Let
    C2; G |- let x : ST1 = e in t : AT2 :: D1 -> D3

    C; G |- t : AT :: Empty -> D2
    -------------------------------------- :: TD_Spawn
    C; G |- spawn t : Thread :: D1 -> D1

    C; G |- v : L rho :: D1 -> D1
    C |- D1 + (rho:1) <= D2
    -------------------------------------- :: TD_Lock
    C; G |- v . lock : L rho :: D1 -> D2

    C; G |- v : L rho :: D1 -> D1
    C |- D1 - (rho : 1) <= D2
    ------------------------------------- :: TD_Unlock
    C; G |- v.unlock : L rho :: D1 -> D2


