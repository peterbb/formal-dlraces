

grammar

constraint_formula :: constraint_formula_ ::=
    | C |= C'           :: M:: ConstraintModels
                                {{tex [[C]] \models [[C']] }}
                                {{coq (denote_constraints [[C]] ->
                                       denote_constraints [[C']])}}

    | C |- r [= r'      :: M:: ConstraintLockset
                                {{tex [[C]] \vdash [[r]] \sqsubseteq [[r']]}}
                                {{coq (denote_constraints [[C]] ->
                                       denote_constraints (cons (c_LockSet [[r]] [[r']])  nil))}}

embed
{{coq
Require Import MSetPositive.
Require Export Program.Basics.

Require Import Syntax TypeSyntax FreeVar.

(* === Denotation of lock sets === *)
Definition lockset' := PositiveSet.t.
Definition rho_denotation := ls_var -> lockset'.

Fixpoint denote_lockset (r:lockset) (rho_den : rho_denotation) : lockset' :=
    match r with
    | ls_Var rho => rho_den rho
    | ls_Single pi => PositiveSet.singleton pi
    | ls_Union r1 r2 => 
        PositiveSet.union (denote_lockset r1 rho_den)
                          (denote_lockset r2 rho_den)
    end.

(* === Denotation of lock env === *)
Definition lockenv' := ls_var -> Zinf.
Definition empty_lockenv' : lockenv' := fun _ => Zinf_Z 0.
Definition X_denotation := le_var -> lockenv'.

Definition extend_lockenv' (le : lockenv') rho n : lockenv' :=
    fun rho' =>
        if eq_ls_var rho rho'
        then n
        else (le rho').
    
Fixpoint denote_lockenv (D : lockenv) (den : X_denotation) : lockenv' :=
    match D with
    | le_Empty => empty_lockenv'
    | le_Var X => den X
    | le_Append D' (ls_Var rho) n => 
        extend_lockenv' (denote_lockenv D' den) rho n
    | le_Append _ _ _ => 
        (fun _ => Zinf_Z 0)
    | le_Add D1 D2 =>
        (fun rho => Zinf_add (denote_lockenv D1 den rho)
                             (denote_lockenv D2 den rho))
    | le_Sub D1 D2 =>
        (fun rho => Zinf_sub (denote_lockenv D1 den rho)
                             (denote_lockenv D2 den rho))
    end.

(* === Denotation of constriants === *)
Definition D_pointwise_leq (D1 D2 : lockenv') :=
    forall (rho:ls_var), Zinf_Leq (D1 rho) (D2 rho).

Definition pointwise_leq (D1 D2 : lockenv) : Prop :=
    forall (X_den : X_denotation),
        D_pointwise_leq (denote_lockenv D1 X_den) 
                        (denote_lockenv D2 X_den).


Definition denote_ineq (rho_den : rho_denotation) (X_den : X_denotation) (c : ineq) : Prop :=
    match c with
    | c_LockSet r1 r2 =>
        PositiveSet.Subset (denote_lockset r1 rho_den)
                           (denote_lockset r2 rho_den)
    | c_LockEnv D1 D2 =>
        D_pointwise_leq (denote_lockenv D1 X_den)
                      (denote_lockenv D2 X_den)
    end.

Definition denote_constraints (C:constraints) : Prop :=
    forall (rho_den : rho_denotation) (X_den : X_denotation),
        Forall (denote_ineq rho_den X_den) C.

}}
