(* generated by Ott 0.21.2 from: ott/Syntax.ott ott/Common.ott *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import ott_list_core.


Require Import Syntax.
Require Import TypeSyntax.
Require Import FreeVar.


Definition Y : Set := (ls_var + le_var)%type.
Definition subst_t (y: Y) : Set :=
    match y with
    | inl _ => lockset
    | inr _ => lockenv
    end.

Definition substfn := forall y:Y, subst_t y.


Definition subst : Set := ((substfn * (list le_var) * (list ls_var))%type).

Inductive substitution_formula : Set := 
.

Definition empty_subst (y : Y) : subst_t y := 
    match y with
    | inl rho => ls_Var rho
    | inr X => le_Var X
    end.

Definition extend_subst_le (X : le_var) (v : lockenv) (th : substfn) (y : Y) : subst_t y :=
    match y as y' return (subst_t y') with
    | inl rho' => th (inl rho')
    | inr X' => 
        if eq_le_var X X'
        then v
        else (th (inr X'))
    end.

Definition extend_subst_ls (rho : ls_var) (v : lockset) (th : substfn) (y : Y) : subst_t y :=
    match y as y' return (subst_t y') with
    | inl rho' => 
        if eq_ls_var rho rho'
        then v
        else (th (inl rho'))
    | inr X' => th (inr X')
    end.

(* =========== Create substitution =========== *)
Fixpoint extend_subst_list_ls (rs : list lockset) (rhos : list ls_var) (th : substfn) : substfn :=
    match rs, rhos with
    | nil, nil => th
    | (r :: rs'), (rho :: rhos') =>
      extend_subst_list_ls rs' rhos' (extend_subst_ls rho r th)
    | _, _ => th
    end.

Fixpoint extend_subst_list_le (Ds : list lockenv) (Xs : list le_var) (th : substfn) : substfn :=
    match Ds, Xs with
    | nil, nil => th
    | (D :: Ds'), (X :: Xs') =>
        extend_subst_list_le Ds' Xs' (extend_subst_le X D th)
    | _, _ => th
    end.

Definition create_subst (Ds : list lockenv) (Xs : list le_var) 
                        (rs : list lockset) (rhos : list ls_var) :subst :=
    (extend_subst_list_le Ds Xs
        (extend_subst_list_ls rs rhos empty_subst),
    Xs, rhos).

Open Scope positive.

Section RenameBound.
    Variable max : positive.

    Fixpoint mk_shift_bound_X (th : substfn) (Xs : list le_var) : substfn :=
        match Xs with
        | nil => th
        | X :: Xs' => extend_subst_le X (le_Var (X + max)) (mk_shift_bound_X th Xs')
        end.

    Fixpoint mk_shift_bound_rho (th : substfn) (rhos : list ls_var) : substfn :=
        match rhos with
        | nil => th
        | rho :: rhos' => extend_subst_ls rho (ls_Var (rho + max)) (mk_shift_bound_rho th rhos')
        end.

    Definition mk_shift_bound (Xs : list le_var) (rhos : list ls_var) : substfn :=
        mk_shift_bound_X (mk_shift_bound_rho empty_subst rhos) Xs.
End RenameBound.

(* =========== Lift a substitution a substitution =========== *)
Section LiftSubst.
    Variable th_and_freevars : subst.
    Let th : substfn := fst (fst th_and_freevars).

    Fixpoint lift_subst_r (r : lockset) : lockset := 
        match r with
        | ls_Var rho => th (inl rho)
        | ls_Single _ => r
        | ls_Union r1 r2 => 
            ls_Union (lift_subst_r r1) (lift_subst_r r2)
        end.

    Fixpoint lift_subst_D (D : lockenv) : lockenv := 
        match D with
        | le_Empty => le_Empty
        | le_Var X => th (inr X)
        | le_Append D' r n =>
            le_Append (lift_subst_D D') (lift_subst_r r) n
        | le_Add D1 D2 =>
            le_Add (lift_subst_D D1) (lift_subst_D D2)
        | le_Sub D1 D2 =>
            le_Sub (lift_subst_D D1) (lift_subst_D D2)
        end.
    
    Fixpoint lift_subst_AT (AT : annotatedtype) : annotatedtype := 
        match AT with
        | at_Lock r => at_Lock (lift_subst_r r)
        | at_Arrow AT1 (EffectIntro D1 D2) AT2 =>
            at_Arrow (lift_subst_AT AT1)
                     (EffectIntro (lift_subst_D D1) (lift_subst_D D2))
                     (lift_subst_AT AT2)
        | _ => AT
        end.

    Definition lift_subst_ineq (c : ineq) : ineq :=
        match c with
        | c_LockSet r1 r2 =>
            c_LockSet (lift_subst_r r1) (lift_subst_r r2)
        | c_LockEnv D1 D2 =>
            c_LockEnv (lift_subst_D D1) (lift_subst_D D2)
        end.

    Definition lift_subst_C (C : constraints) : constraints := 
        fold_right (@cons _)  (@nil _) (map lift_subst_ineq C).
End LiftSubst.

Section LiftSubstSC.
    Variable th_and_freevars : subst.
    Let th : substfn := fst (fst th_and_freevars).

    Let max_list (l : list positive) : positive := 
        (fold_right Pos.max 1 l)%positive.

    Let max_set (t : PositiveSet.t) : positive :=
        (PositiveSet.fold Pos.max t 1) % positive.

    Let th_max := ((max_list (snd (fst th_and_freevars))) +
                              (max_list (snd th_and_freevars))) % positive.

    Definition lift_subst_SC (SC : scheme) : scheme := 
        match SC with
        | sc_Quant rhos Xs C AT =>
            let mx := 1 + th_max + (max_set (free_le_C C)) +
                               (max_set (free_ls_C C)) +
                               (max_set (free_ls_AT AT)) +
                               (max_set (free_le_AT AT)) 
            in let su := mk_shift_bound mx Xs rhos
            in
                sc_Quant (map (fun rho => rho + mx) rhos)
                         (map (fun X => X + mx) Xs )
                         (lift_subst_C th_and_freevars (lift_subst_C (su, nil, nil) C))
                         (lift_subst_AT th_and_freevars (lift_subst_AT (su, nil, nil) AT))
        end.

End LiftSubstSC.





